//--------------------------------------------------------------START-----------------------------------------------------------------------------------------------//

// пакеты, комментарии к ним описывают в каком контексте используются плагины при вызове тасков/задач для gulp

var gulp         = require('gulp'), // собственно сам gulp
    sass         = require('gulp-sass'), // из sass в css
    browserSync  = require('browser-sync'), // сервер, очень удобно
    concat       = require('gulp-concat'), // для конкатенации js скриптов
    uglify       = require('gulp-uglifyjs'), // для сжимания js скриптов
    cssnano      = require('gulp-cssnano'), // для сжимания стилей
    renaem       = require('gulp-rename'), // плагин для переименования
    del          = require('del'), // очищает папку прода при каждой новой сборке проекта
    imagemin     = require('gulp-imagemin'), // работа с изображениями
    pngquant     = require('imagemin-pngquant'), // работа с изображениями
    cache        = require('gulp-cache'), // плагин для кеширования изображений, помогает при обработке большого количества изображений
    autoprefixer = require('gulp-autoprefixer'); // внедряем автопреффиксы и каскад в стили

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//

// пишем таск для препроцессинга css
gulp.task('sass', function() {
	return gulp.src('develop/sass/**/*.sass') // откуда берём
	.pipe(sass({outputStyle: 'expanded'}).on('error', sass.logError)) // что делаем | игнор ошибок при компиляции
	.pipe(autoprefixer(['last 15 versions', '> 1%', 'ie 8', 'ie 7'], {cascade: true})) // эта бадяга для автопрефиксов, адаптивности в 15 помледних версиях всех браузеров, интернет эксплоллере 7 и 8 версий. Также включена поддержка каскадирования и игнорирование ошибок при компиляции sass файлов в консоле
	.pipe(gulp.dest('develop/css')) // куда отправляем
	.pipe(browserSync.reload({stream: true})) // заставляем browser-sync рабоать со стилями (инжектим их в разметку при каждом сохранении)
});

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//

/*
* создаём таск для конкатенации и сжимания js
* файлов из библиотек
*/

gulp.task('scripts', function() { //имя таска
	return gulp.src([ // его функция возваращает пути до скриптов, которые будут
		'develop/libs/jquery-v3.3.1/jquery.js',
		'develop/libs/bootsrap-v4.2.1/js/bootstrap.js'
		])
	.pipe(concat('libs.min.js')) //конкатенироваться
	.pipe(uglify()) // и сжиматься
	.pipe(gulp.dest('develop/libs-min/js')); // результат работы таска доступен по указанному в строке пути
});

//------------------------------------------------------------------------------------------------------------------------------------------------------------------/
// Таск для сжатия стилей css библиотек
gulp.task('css-libs', ['sass'], function() { // его имя и следом за ним таск sass
	return gulp.src('develop/css/libs.css') // функция таска фозваращет местоположение стилей библиотек. ВНИМАНИЕ!!! в файле libs.css через @import подключаются стили библиотек, которые не минимизированы. gulp может выдавать предупреждение при вызове таска, что этот метод устарел.
	.pipe(cssnano()) // здесь минимизируем стили
	.pipe(renaem({suffix: '.min'})) // добавляем к итоговому минимизированному файлу суффикс .min
	.pipe(gulp.dest('develop/libs-min/css')); // указываем где это файл будет лежать
});

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//

// заставляем работать browser-sync в папке исходников (develop)
gulp.task('browser-sync', function() { // создаём таск
	browserSync({ // имя таска
		server: { // указываем какая папка будет сервером
			baseDir: 'develop'
		},
		notify: false, // убрать всплывающее уведомление о соединении
		//open: true,
		//online: true, // Work Offline Without Internet Connection
		//host: "localhost",
		//port: 3000,
		//tunnel: true,
		//tunnel: "test", // Demonstration page: http://test.localtunnel.me
	});
});

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//

/*
* Таск очистки prod -папки продакшн 
* дабы изабвиться от лишнего в ней
* перед финальной сборкой
*/
gulp.task('clean', function() { // имя таска
	return del.sync('prod'); /*возвращает путь до папки которая будет удалена*/
});

// Убрать лишнее в develop
gulp.task('dev-clean', function() { // имя таска
	return del.sync('develop/libs-min'); /*возвращает путь до папки которая будет удалена*/
});
//------------------------------------------------------------------------------------------------------------------------------------------------------------------//

/*
* Таск очистки кеша изображений.
* Нужен в том случа если папка с изображениями была перемещена,
* а кеш изображений не висел | в таск засунул dev-clean для удобства
*/
gulp.task('clear', ['dev-clean'], function() { // имя таска
	return cache.clearAll(); // возвращает функцию по очистке кеша изображений
});

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//

//таск для работы с изображениями
gulp.task('img', function() { // его имя 
	return gulp.src('develop/img/**/*') // его функция возваращает путь до изображений
	.pipe(cache(imagemin({ // юзаем imagemin c 3 указанными ниже параметрами и кешированием - cache
		// .pipe(imagemin({ // Сжимаем изображения без кеширования
		interlaced: true,
		progressive: true,
		svgoPlugins: [{removeViewBox: false}],
		use: [pngquant()] // юзаем pngquant
	})))
	.pipe(gulp.dest('prod/img')); // выгружаем обработаные изображения сюда
}); 

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//

// Запускаем слежение за файлами
gulp.task('watch', ['browser-sync', 'css-libs', 'scripts'], function() { // наводим порядок: 1)browser-sync->2)компиляция sass->3)конкатенация и сжатие js->4) слежение за файлами(watch) || watch с участием js скриптов
//gulp.task('watch', ['browser-sync', 'css-libs'], function() { // || watch без участия js скриптов
	gulp.watch('develop/sass/**/*.sass', ['sass']); // выборка по шаблону и следим за sass
	gulp.watch('develop/**/*.html', browserSync.reload); // watch html
	gulp.watch('develop/js/**/*.js', browserSync.reload); // watch js - подрубить чтобы участвовали скрипты
	gulp.watch('develop/css/**/*', browserSync.reload);
});

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//

// Финальный таск билд для сборки проекта
		gulp.task('build',['clean', 'img', 'css-libs', 'scripts'], function() { // его имя || перед сборкой проекта таск отрабатывает другие таски, укаазанные в квадратных скобках || сборка со сжатием скриптов
//gulp.task('build',['clean', 'img', 'sass'], function() { // его имя || перед сборкой проекта таск отрабатывает другие таски, укаазанные в квадратных скобках | сборка без участия скриптов
	var buildCss = gulp.src([ // через перерменную создаём массив путей. Конкретно здесь массив для стилей
		'develop/css/styles.css',
		'develop/css/fonts.css',
		'develop/css/media.css'
		])
	.pipe(gulp.dest('prod/css')); // выгрузим все стиле в прод-папку

// переменная для шрифтов
var buildFonts = gulp.src('develop/fonts/**/*') //откуда берём и какая вложенность
.pipe(gulp.dest('prod/fonts')); //куда кладём

// следующее для переноса js
var buildJs = gulp.src('develop/js/**/*') //откуда берём и какая вложенность
.pipe(gulp.dest('prod/js')); //куда кладём

// Библиотеки css
varLibrariesCss = gulp.src('develop/libs-min/css/libs.min.css')
.pipe(gulp.dest('prod/libs-min/css'));

// Библиотеки js
varLibrariesCss = gulp.src('develop/libs-min/js/libs.min.js')
.pipe(gulp.dest('prod/libs-min/js'));

// фавикон
var buildFavicon = gulp.src('develop/favicon.ico')
.pipe(gulp.dest('prod'));

// следующее для переноса html
var buildHtml = gulp.src('develop/*.html') //откуда берём и какая вложенность
.pipe(gulp.dest('prod')); //куда кладём
});

//--------------------------------------------------------------------END-------------------------------------------------------------------------------------------//